# -*- coding: utf-8 -*-
"""priyanshu_Assignment4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14bQSZ9_TBJ-hy4yDNv5g1kY8JP2nI9I4
"""

# # Data Preprocessing
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

path = 'https://raw.githubusercontent.com/umangkejriwal1122/Machine-Learning/master/Data%20Sets/titanic.csv'
print(path)

# Importing the dataset from Google Drive
dataset = pd.read_csv(path)

print(dataset)

#Print Total number of Rows & columns in dataset
print(dataset.shape)

#Print Imformation about data
dataset.info()

# Data type information
types = dataset.dtypes
print(types)

#Count total number of rank in Data
class_counts = dataset.groupby('Pclass').size()
print(class_counts)

#Count total number of rank in Data
class_counts = dataset.groupby('SibSp').size()
print(class_counts)

#Count total number of rank in Data
class_counts = dataset.groupby('Parch').size()
print(class_counts)

#Count total number of rank in Data
class_counts = dataset.groupby('Ticket').size()
print(class_counts)

X=dataset[["Age","SibSp","Parch","Fare","Sex","Pclass"]]
y=dataset["Survived"]

print(X)

print(y)

X.isnull().sum()

y.isnull().sum()

mean_age=X['Age'].mean()
mean_age=np.round(mean_age,2)
mean_age

X['Age'].fillna(mean_age,inplace=True)
X.head(20)

X.isnull().sum()

# Encoding Categorical data:
# Encoding the Independent Variable
from sklearn.preprocessing import LabelEncoder
labelencoder_X = LabelEncoder()
X["Sex"] = labelencoder_X.fit_transform(X["Sex"])

print(X)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

print(X_train)

print(X_test)

print(y_test)

print(y_train)

# Feature Scaling
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)

print(X_train)

print(X_test)

# Fitting K-NN to the Training set
from sklearn.neighbors import KNeighborsClassifier
from sklearn.neighbors import KNeighborsClassifier
classifier =  KNeighborsClassifier(n_neighbors = 5, metric = 'minkowski', p = 2)
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

# calculate Accuracy
from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred)*100))

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
# calculate precision
# Precision = TruePositives / (TruePositives + FalsePositives)
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision*100))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

# F-Measure = (2 * Precision * Recall) / (Precision + Recall)
# calculate score
score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

Age= 30     
SibSp=1
Parch=1    
Fare= 100   
Sex= 1     
Pclass=3    

output=classifier.predict(sc.transform([[Age ,SibSp,Parch,Fare, Sex, Pclass]]))
print("Passenger will die =", output)
if output==[1]:
  print( 'Passanger will survive')
else:
  print('Passanger will die')

import pickle 
print("[INFO] Saving model...")
# Save the trained model as a pickle string. 
saved_model=pickle.dump(classifier,open('/content/drive/My Drive/Knearestneighborclassifier.pkl', 'wb')) 
# Saving model to disk

# Load the pickled model 
model = pickle.load(open('/content/drive/My Drive/Knearestneighborclassifier.pkl', 'rb'))  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

# save the model to disk
import joblib
filename = '/content/drive/My Drive/finalized_model_KNN.sav'
joblib.dump(classifier, filename)
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load(filename)
result = loaded_model.score(X_test, y_test)
print(result)

# Fitting Naive Bayes to the Training set
from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
classifier.fit(X_train, y_train)

# Predicting the Test set results
y_pred = classifier.predict(X_test)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

# calculate Accuracy
from sklearn.metrics import accuracy_score
print('Accuracy Naive Bayes: %.2f' % (accuracy_score(y_test, y_pred)*100))
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
# calculate precision
# Precision = TruePositives / (TruePositives + FalsePositives)
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision*100))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

# F-Measure = (2 * Precision * Recall) / (Precision + Recall)
# calculate score
score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

Age= 30     
SibSp=1
Parch=1    
Fare= 100   
Sex= 1     
Pclass=3    

output=classifier.predict(sc.transform([[Age ,SibSp,Parch,Fare, Sex, Pclass]]))
print("Passenger will die =", output)
if output==[1]:
  print( 'Passanger will survive')
else:
  print('Passanger will die')

import pickle 
print("[INFO] Saving model...")
# Save the trained model as a pickle string. 
saved_model=pickle.dump(classifier,open('/content/drive/My Drive/naivebayesclassifier.pkl', 'wb')) 
# Saving model to disk

# Load the pickled model 
model = pickle.load(open('/content/drive/My Drive/naivebayesclassifier.pkl', 'rb'))  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

# save the model to disk
import joblib
filename = '/content/drive/My Drive/finalized_model_NaiveBayes.sav'
joblib.dump(classifier, filename)
 
# some time later...
 
# load the model from disk
loaded_model = joblib.load(filename)
result = loaded_model.score(X_test, y_test)
print("Naive Bayes", result)

!pip install streamlit

# Mounting Google Drive
from google.colab import drive
drive.mount('/content/drive')

!pip install pyngrok

!ngrok authtoken 1rQ8XkYyUBK9R8KvW6wdVZD6HNI_44Zoypk4KP8df9VdpBAuQ

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st 
# from PIL import Image
# import pickle
# import numpy as np
# import matplotlib.pyplot as plt
# import pandas as pd
# st.set_option('deprecation.showfileUploaderEncoding', False)
# # Load the pickled model
# model = pickle.load(open('/content/drive/My Drive/Knearestneighborclassifier.pkl', 'rb'))
# model_naive = pickle.load(open('/content/drive/My Drive/naivebayesclassifier.pkl', 'rb'))
# dataset= pd.read_csv('https://raw.githubusercontent.com/umangkejriwal1122/Machine-Learning/master/Data%20Sets/titanic.csv')
# X=dataset[["Age","SibSp","Parch","Fare","Sex","Pclass"]]
# from sklearn.preprocessing import StandardScaler
# sc = StandardScaler()
# X = sc.fit_transform(X)
# def predict_note_authentication(Age ,SibSp,Parch,Fare, Sex, Pclass):
#  output= model.predict(sc.transform([[Age ,SibSp,Parch,Fare, Sex, Pclass]]))
#   #print("Passenger will die =", output)
#   if output==[1]:
#     prediction="Passanger will survive"
#   else:
#     prediction="Passanger will die"
#   print(prediction)
#   return prediction
# 
#   def predict_naive(Age ,SibSp,Parch,Fare, Sex, Pclass):
#  output= model_naive.predict(sc.transform([[Age ,SibSp,Parch,Fare, Sex, Pclass]]))
#   #print("Passenger will die =", output)
#   if output==[1]:
#     prediction="Passanger will survive"
#   else:
#     prediction="Passanger will die"
#   print(prediction)
#   return prediction
# def main():
#     
#     html_temp = """
#    <div class="" style="background-color:blue;" >
#    <div class="clearfix">           
#    <div class="col-md-12">
#    <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
#    <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
#    <center><p style="font-size:25px;color:white;margin-top:10px;"Machine Learning Lab Experiment</p></center> 
#    </div>
#    </div>
#    </div>
#    """
#     st.markdown(html_temp,unsafe_allow_html=True)
#     st.header("Passenger Will Survive Or Not Prediction using K nearest neighbor And Naive Bayes")
#     
#     Sex= st.selectbox(
#     "Sex",
#     ("Male", "Female", "Others")
#     )
#     
#     Age = st.number_input('Insert a Age',18,60)
#     SibSp = st.number_input('Insert a SibSp',0,10)
#     Parch = st.number_input('Insert a Parch',1,10)
#     Pclass = st.number_input('Insert a Pclass',18,60)
#    
#     Fare = st.number_input("Insert Fare",1,15000)
#     resul=""
#     if st.button("Predict"):
#       result=predict_note_authentication(Age ,SibSp,Parch,Fare, Sex, Pclass)
#       st.success('Model has predicted {}'.format(result))
#     if st.button("Naive Bayes Predict"):
#       result=predict_naive(Age ,SibSp,Parch,Fare, Sex, Pclass)
#       st.success('Model has predicted {}'.format(result))
#       
#     if st.button("About"):
#       st.subheader("Developed by Priyanshu Jain")
#       st.subheader("Department of Computer Engineering")
# 
# if __name__=='__main__':
#   main()

!nohup streamlit run  app.py &

from pyngrok import ngrok
url=ngrok.connect(port='8050')
url

!streamlit run --server.port 80 app.py

ngrok.kill()